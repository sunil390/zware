---
- hosts: vs01
  collections:
    - ibm.ibm_zos_core
  gather_facts: false

  vars:
  environment: "{{ environment_vars }}"

  tasks:
    # ----------------------------------------------------------------------
    # STEP 1: Get the current epoch time directly from the mainframe host.
    # This is the crucial step to avoid timezone discrepancies.
    # ----------------------------------------------------------------------
    - name: Get current epoch time from the mainframe
      ibm.ibm_zos_core.zos_command:
        cmd: "date +%s" # This USS command returns the current epoch time
      register: mainframe_time_raw

    # ----------------------------------------------------------------------
    # STEP 2: Calculate the start time epoch using the time we just fetched.
    # ----------------------------------------------------------------------
    - name: Calculate the start time epoch based on the host's time
      set_fact:
        # Use the stdout from the previous command, which is the host's epoch time.
        start_epoch: "{{ (mainframe_time_raw.stdout | int) - (hours_ago | int) * 3600 }}"

    # ----------------------------------------------------------------------
    # STEP 3: Format start time into the formats required by pcon: YYDDD and hhmmss.
    # ----------------------------------------------------------------------
    - name: Format start date and time for the pcon command
      set_fact:
        start_date_yyddd: "{{ '%y%j' | strftime(start_epoch) }}"
        start_time_hhmmss: "{{ '%H%M%S' | strftime(start_epoch) }}"

    # ----------------------------------------------------------------------
    # STEP 4: Construct and execute the full pcon shell command.
    # ----------------------------------------------------------------------
    - name: Construct the full pcon shell command string
      set_fact:
        pcon_command: "pcon -s {{ start_date_yyddd }} {{ start_time_hhmmss }}"

    - name: Display the exact command that will be executed
      debug:
        msg: "Executing USS command: {{ pcon_command }}"

    - name: Execute the pcon command to retrieve log content
      ibm.ibm_zos_core.zos_script:
        cmd: "{{ pcon_command }}"
      register: pcon_script_output

    # ----------------------------------------------------------------------
    # STEP 5: Set the captured stdout as a job artifact for the AWX client.
    # ----------------------------------------------------------------------
    - name: Set the log content as a job artifact for AWX
      set_stats:
        data:
          log_content: "{{ pcon_script_output.stdout }}"
